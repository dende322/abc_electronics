{"ast":null,"code":"import { ENV } from '../constants';\nexport class Client {\n  constructor() {\n    this.baseAPI = ENV.BASE_API;\n  }\n  async getClients() {\n    try {\n      const url = `${this.baseAPI}/${ENV.API_ROUTES.CLIENT.GET_ALL_CLIENTS}`;\n      const response = await fetch(url);\n      const result = await response.json();\n      if (response.status !== 200) throw result;\n      return result;\n    } catch (error) {\n      throw error;\n    }\n  }\n  async getClient(id) {\n    try {\n      const url = `${this.baseAPI}/${ENV.API_ROUTES.CLIENT.GET_ALL_CLIENTS}/${id}`;\n      const response = await fetch(url);\n      const result = await response.json();\n      if (response.status !== 200) throw result;\n      return result;\n    } catch (error) {\n      throw error;\n    }\n  }\n  async deleteClient(id) {\n    try {\n      const url = `${this.baseAPI}/${ENV.API_ROUTES.CLIENT.DELETE_CLIENT}/${id}`;\n      const params = {\n        method: \"DELETE\"\n      };\n      const response = await fetch(url, params);\n      const result = await response.json();\n      if (response.status !== 200) throw result;\n      return result;\n    } catch (error) {\n      throw error;\n    }\n  }\n  async createClient(data, metodo) {\n    try {\n      const formData = new FormData();\n      Object.keys(data).forEach(key => {\n        formData.append(key, data[key]);\n      });\n      console.log(data);\n      const url = `${this.baseAPI}/${ENV.API_ROUTES.CLIENT.CREATE_CLIENT}`;\n      const params = {\n        method: metodo,\n        body: data\n      };\n    } catch (error) {}\n  }\n}","map":{"version":3,"names":["ENV","Client","constructor","baseAPI","BASE_API","getClients","url","API_ROUTES","CLIENT","GET_ALL_CLIENTS","response","fetch","result","json","status","error","getClient","id","deleteClient","DELETE_CLIENT","params","method","createClient","data","metodo","formData","FormData","Object","keys","forEach","key","append","console","log","CREATE_CLIENT","body"],"sources":["S:/Universidad/2024-01/BD 2/BD/Trabajos/Final/client/src/api/client.js"],"sourcesContent":["import {ENV} from '../constants';\r\n\r\nexport class Client {\r\n    baseAPI = ENV.BASE_API;\r\n\r\n    async getClients(){\r\n        try{\r\n            const url = `${this.baseAPI}/${ENV.API_ROUTES.CLIENT.GET_ALL_CLIENTS}`;\r\n\r\n            const response = await fetch(url);\r\n            const result = await response.json();\r\n\r\n            if(response.status !== 200) throw result;\r\n            return result;\r\n            \r\n        }catch(error){\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    async getClient(id) {\r\n        try {\r\n            const url = `${this.baseAPI}/${ENV.API_ROUTES.CLIENT.GET_ALL_CLIENTS}/${id}`;\r\n\r\n            const response = await fetch(url);\r\n            const result = await response.json();\r\n\r\n            if(response.status !== 200) throw result;\r\n            return result;\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    async deleteClient(id){\r\n        try {\r\n            const url = `${this.baseAPI}/${ENV.API_ROUTES.CLIENT.DELETE_CLIENT}/${id}`;\r\n            const params = {\r\n                method : \"DELETE\"\r\n            };\r\n\r\n            const response = await fetch(url,params);\r\n            const result = await response.json();\r\n\r\n            if(response.status !== 200) throw result;\r\n            return result;\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    async createClient(data, metodo){\r\n        try {\r\n            const formData = new FormData();\r\n\r\n            Object.keys(data).forEach((key) => {\r\n                formData.append(key, data[key]);\r\n            });\r\n            console.log(data);\r\n            const url = `${this.baseAPI}/${ENV.API_ROUTES.CLIENT.CREATE_CLIENT}`;\r\n            const params = {\r\n                method : metodo,\r\n                body : data\r\n            }\r\n        } catch (error) {\r\n            \r\n        }\r\n    }\r\n}"],"mappings":"AAAA,SAAQA,GAAG,QAAO,cAAc;AAEhC,OAAO,MAAMC,MAAM,CAAC;EAAAC,YAAA;IAAA,KAChBC,OAAO,GAAGH,GAAG,CAACI,QAAQ;EAAA;EAEtB,MAAMC,UAAUA,CAAA,EAAE;IACd,IAAG;MACC,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACH,OAAO,IAAIH,GAAG,CAACO,UAAU,CAACC,MAAM,CAACC,eAAe,EAAE;MAEtE,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACL,GAAG,CAAC;MACjC,MAAMM,MAAM,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MAEpC,IAAGH,QAAQ,CAACI,MAAM,KAAK,GAAG,EAAE,MAAMF,MAAM;MACxC,OAAOA,MAAM;IAEjB,CAAC,QAAMG,KAAK,EAAC;MACT,MAAMA,KAAK;IACf;EACJ;EAEA,MAAMC,SAASA,CAACC,EAAE,EAAE;IAChB,IAAI;MACA,MAAMX,GAAG,GAAG,GAAG,IAAI,CAACH,OAAO,IAAIH,GAAG,CAACO,UAAU,CAACC,MAAM,CAACC,eAAe,IAAIQ,EAAE,EAAE;MAE5E,MAAMP,QAAQ,GAAG,MAAMC,KAAK,CAACL,GAAG,CAAC;MACjC,MAAMM,MAAM,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MAEpC,IAAGH,QAAQ,CAACI,MAAM,KAAK,GAAG,EAAE,MAAMF,MAAM;MACxC,OAAOA,MAAM;IACjB,CAAC,CAAC,OAAOG,KAAK,EAAE;MACZ,MAAMA,KAAK;IACf;EACJ;EAEA,MAAMG,YAAYA,CAACD,EAAE,EAAC;IAClB,IAAI;MACA,MAAMX,GAAG,GAAG,GAAG,IAAI,CAACH,OAAO,IAAIH,GAAG,CAACO,UAAU,CAACC,MAAM,CAACW,aAAa,IAAIF,EAAE,EAAE;MAC1E,MAAMG,MAAM,GAAG;QACXC,MAAM,EAAG;MACb,CAAC;MAED,MAAMX,QAAQ,GAAG,MAAMC,KAAK,CAACL,GAAG,EAACc,MAAM,CAAC;MACxC,MAAMR,MAAM,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MAEpC,IAAGH,QAAQ,CAACI,MAAM,KAAK,GAAG,EAAE,MAAMF,MAAM;MACxC,OAAOA,MAAM;IACjB,CAAC,CAAC,OAAOG,KAAK,EAAE;MACZ,MAAMA,KAAK;IACf;EACJ;EAEA,MAAMO,YAAYA,CAACC,IAAI,EAAEC,MAAM,EAAC;IAC5B,IAAI;MACA,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;MAE/BC,MAAM,CAACC,IAAI,CAACL,IAAI,CAAC,CAACM,OAAO,CAAEC,GAAG,IAAK;QAC/BL,QAAQ,CAACM,MAAM,CAACD,GAAG,EAAEP,IAAI,CAACO,GAAG,CAAC,CAAC;MACnC,CAAC,CAAC;MACFE,OAAO,CAACC,GAAG,CAACV,IAAI,CAAC;MACjB,MAAMjB,GAAG,GAAG,GAAG,IAAI,CAACH,OAAO,IAAIH,GAAG,CAACO,UAAU,CAACC,MAAM,CAAC0B,aAAa,EAAE;MACpE,MAAMd,MAAM,GAAG;QACXC,MAAM,EAAGG,MAAM;QACfW,IAAI,EAAGZ;MACX,CAAC;IACL,CAAC,CAAC,OAAOR,KAAK,EAAE,CAEhB;EACJ;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}